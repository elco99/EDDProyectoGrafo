package proyectografo;

import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.shortestpath.DijkstraShortestPath;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.StringTokenizer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.collections15.Transformer;

/**
 *
 * @author Dany
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    ArrayList<Persona> lista = new ArrayList<Persona>();
    ArrayList<Object[]> listaTmp = new ArrayList<Object[]>();
    DirectedSparseMultigraph<String, Peso> graph = new DirectedSparseMultigraph<String, Peso>();

    public main() {
        try {
            initComponents();
            this.setLocationRelativeTo(null);
            File archivo = null;
            try {
                archivo = new File("./personas.dany");
                FileInputStream entrada = new FileInputStream(archivo);
                ObjectInputStream objeto = new ObjectInputStream(entrada);
                try {
                    lista = (ArrayList<Persona>) objeto.readObject();
                } catch (Exception ex) {

                } finally {
                    entrada.close();
                    objeto.close();
                }

            } catch (Exception ex) {

            }
        } catch (Exception ex) {

        }
        RefreshBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AgregarPersona = new javax.swing.JDialog();
        jb_persona = new javax.swing.JButton();
        jb_salir = new javax.swing.JButton();
        tf_nombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rb_m = new javax.swing.JRadioButton();
        rb_f = new javax.swing.JRadioButton();
        sp_edad = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        AddTable = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        Relaciones = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        box_persona1 = new javax.swing.JComboBox();
        box_persona2 = new javax.swing.JComboBox();
        AgregarRelacion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        sp_relacion = new javax.swing.JSpinner();
        Dijkstra = new javax.swing.JDialog();
        dijsktra1 = new javax.swing.JComboBox();
        dijsktra2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        GraficarDijsktra = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jj = new javax.swing.JMenu();
        AddPerson = new javax.swing.JMenuItem();
        AddRelation = new javax.swing.JMenuItem();
        Graph = new javax.swing.JMenuItem();
        RelacionMasCorta = new javax.swing.JMenuItem();
        Salir = new javax.swing.JMenuItem();

        jb_persona.setText("Agregar Persona");
        jb_persona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_personaActionPerformed(evt);
            }
        });

        jb_salir.setText("Cerrar");
        jb_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_salirActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre");

        jLabel6.setText("Edad");

        jLabel8.setText("Sexo");

        buttonGroup1.add(rb_m);
        rb_m.setText("M");

        buttonGroup1.add(rb_f);
        rb_f.setText("F");

        sp_edad.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        AddTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero", "Nombre"
            }
        ));
        jScrollPane1.setViewportView(AddTable);

        javax.swing.GroupLayout AgregarPersonaLayout = new javax.swing.GroupLayout(AgregarPersona.getContentPane());
        AgregarPersona.getContentPane().setLayout(AgregarPersonaLayout);
        AgregarPersonaLayout.setHorizontalGroup(
            AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AgregarPersonaLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(AgregarPersonaLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(50, 50, 50)
                            .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(AgregarPersonaLayout.createSequentialGroup()
                            .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel8))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(AgregarPersonaLayout.createSequentialGroup()
                                    .addComponent(rb_m)
                                    .addGap(18, 18, 18)
                                    .addComponent(rb_f))
                                .addComponent(sp_edad, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(68, 68, 68)))
                    .addComponent(jb_persona)
                    .addGroup(AgregarPersonaLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jb_salir)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        AgregarPersonaLayout.setVerticalGroup(
            AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AgregarPersonaLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AgregarPersonaLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(34, Short.MAX_VALUE))
                    .addGroup(AgregarPersonaLayout.createSequentialGroup()
                        .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(sp_edad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rb_m)
                                .addComponent(rb_f)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(AgregarPersonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jb_persona)
                            .addComponent(jb_salir))
                        .addGap(61, 61, 61))))
        );

        jLabel2.setText("Persona 1");

        jLabel3.setText("Persona 2");

        box_persona1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                box_persona1ItemStateChanged(evt);
            }
        });

        AgregarRelacion.setText("Add");
        AgregarRelacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarRelacionActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Relacion"
            }
        ));
        jScrollPane2.setViewportView(Tabla);

        jLabel4.setText("Relacion");

        sp_relacion.setModel(new javax.swing.SpinnerNumberModel(1, 0, 20, 1));

        javax.swing.GroupLayout RelacionesLayout = new javax.swing.GroupLayout(Relaciones.getContentPane());
        Relaciones.getContentPane().setLayout(RelacionesLayout);
        RelacionesLayout.setHorizontalGroup(
            RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RelacionesLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RelacionesLayout.createSequentialGroup()
                        .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(box_persona1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(RelacionesLayout.createSequentialGroup()
                                .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(sp_relacion, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(box_persona2, javax.swing.GroupLayout.Alignment.LEADING, 0, 135, Short.MAX_VALUE))
                                .addGap(47, 47, 47)
                                .addComponent(AgregarRelacion)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        RelacionesLayout.setVerticalGroup(
            RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RelacionesLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(box_persona1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(box_persona2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgregarRelacion))
                .addGap(24, 24, 24)
                .addGroup(RelacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(sp_relacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jLabel5.setText("a");

        GraficarDijsktra.setText("Graficar");
        GraficarDijsktra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficarDijsktraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DijkstraLayout = new javax.swing.GroupLayout(Dijkstra.getContentPane());
        Dijkstra.getContentPane().setLayout(DijkstraLayout);
        DijkstraLayout.setHorizontalGroup(
            DijkstraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DijkstraLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(dijsktra1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(dijsktra2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(DijkstraLayout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(GraficarDijsktra)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DijkstraLayout.setVerticalGroup(
            DijkstraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DijkstraLayout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addGroup(DijkstraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dijsktra1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dijsktra2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addComponent(GraficarDijsktra)
                .addGap(41, 41, 41))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jj.setText("File");

        AddPerson.setText("Agregar Persona");
        AddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPersonActionPerformed(evt);
            }
        });
        jj.add(AddPerson);

        AddRelation.setText("Agregar Relacion");
        AddRelation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRelationActionPerformed(evt);
            }
        });
        jj.add(AddRelation);

        Graph.setText("Grafo");
        Graph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraphActionPerformed(evt);
            }
        });
        jj.add(Graph);

        RelacionMasCorta.setText("Dijkstra");
        RelacionMasCorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RelacionMasCortaActionPerformed(evt);
            }
        });
        jj.add(RelacionMasCorta);

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        jj.add(Salir);

        jMenuBar1.add(jj);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 266, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void RefreshBox() {
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        for (int i = 0; i < lista.size(); i++) {
            modelo.addElement(lista.get(i));
        }
        box_persona1.setModel(modelo);

        DefaultComboBoxModel modelo2 = new DefaultComboBoxModel();
        for (int i = 0; i < lista.size(); i++) {
            modelo2.addElement(lista.get(i));
        }
        box_persona2.setModel(modelo2);

        DefaultComboBoxModel modelo3 = new DefaultComboBoxModel();
        for (int i = 0; i < lista.size(); i++) {
            modelo3.addElement(lista.get(i));
        }
        dijsktra1.setModel(modelo3);

        DefaultComboBoxModel modelo4 = new DefaultComboBoxModel();
        for (int i = 0; i < lista.size(); i++) {
            modelo4.addElement(lista.get(i));
        }
        dijsktra2.setModel(modelo4);
    }
    private void jb_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_salirActionPerformed
        // TODO add your handling code here:
        tf_nombre.setText("");
        AgregarPersona.setVisible(false);
    }//GEN-LAST:event_jb_salirActionPerformed

    private void jb_personaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_personaActionPerformed
        // TODO add your handling code here:
        String nombre;
        nombre = tf_nombre.getText();
        lista.add(new Persona(nombre));

        File archivo = null;
        try {
            archivo = new File("./personas.dany");

            FileOutputStream salida = new FileOutputStream(archivo);
            ObjectOutputStream objeto = new ObjectOutputStream(salida);
            objeto.writeObject(lista);
            objeto.flush();
            objeto.close();
            salida.close();

        } catch (Exception ex) {
        } finally {
            tf_nombre.setText("");
            sp_edad.setValue(0);
            RefreshBox();
            DefaultTableModel modelo = (DefaultTableModel) AddTable.getModel();
            while (modelo.getRowCount() > 0) {
                modelo.removeRow(0);
            }
            for (int i = 0; i < lista.size(); i++) {
                Object[] elementos = {i, lista.get(i)};
                modelo.addRow(elementos);
            }

        }

    }//GEN-LAST:event_jb_personaActionPerformed

    private void GraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraphActionPerformed
        graph = new DirectedSparseMultigraph<String, Peso>();
        for (int j = 0; j < lista.size(); j++) {
            for (int k = 0; k < lista.get(j).getLista().size(); k++) {
                graph.addEdge((Peso) lista.get(j).getLista().get(k)[1], lista.get(j).toString(), lista.get(j).getLista().get(k)[0].toString());
            }
        }
        graficar(graph);
    }//GEN-LAST:event_GraphActionPerformed

    private void AddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPersonActionPerformed
        // TODO add your handling code here:
        AgregarPersona.setModal(true);
        AgregarPersona.pack();
        AgregarPersona.setLocationRelativeTo(null);
        DefaultTableModel modelo = (DefaultTableModel) AddTable.getModel();
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
        for (int i = 0; i < lista.size(); i++) {
            Object[] elementos = {i, lista.get(i)};
            modelo.addRow(elementos);
        }
        AgregarPersona.setVisible(true);
    }//GEN-LAST:event_AddPersonActionPerformed

    private void AddRelationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRelationActionPerformed
        // TODO add your handling code here:
        Relaciones.setModal(true);
        Relaciones.pack();
        RefreshBox();
        listaTmp = new ArrayList<Object[]>();

        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
        for (int i = 0; i < lista.get(0).getLista().size(); i++) {
            Object[] datos = {lista.get(0).getLista().get(i)[0], lista.get(0).getLista().get(i)[1]};
            modelo.addRow(datos);
        }
        Relaciones.setLocationRelativeTo(null);
        Relaciones.setVisible(true);

    }//GEN-LAST:event_AddRelationActionPerformed

    private void RelacionMasCortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelacionMasCortaActionPerformed
        // TODO add your handling code here:
        Dijkstra.setModal(false);
        Dijkstra.setLocationRelativeTo(null);
        Dijkstra.pack();
        RefreshBox();
        Dijkstra.setVisible(true);

    }//GEN-LAST:event_RelacionMasCortaActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_SalirActionPerformed

    private void AgregarRelacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarRelacionActionPerformed
        // TODO add your handling code here:

        String second = box_persona2.getSelectedItem().toString();
        Peso peso = new Peso((int) sp_relacion.getValue());
        if (box_persona1.getSelectedItem() == box_persona2.getSelectedItem()) {
            JOptionPane.showMessageDialog(this, "No se puede agregar el solito");
            return;
        }
        listaTmp = new ArrayList();
        Object[] row = {second, peso};
        listaTmp.add(row);
        lista.get(box_persona1.getSelectedIndex()).getLista().add(row);

        File archivo = null;
        try {
            archivo = new File("./personas.dany");

            FileOutputStream salida = new FileOutputStream(archivo, false);
            ObjectOutputStream object = new ObjectOutputStream(salida);
            object.writeObject(lista);
            object.flush();
            salida.close();
            object.close();

        } catch (Exception ex) {
        } finally {
            DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
            while (modelo.getRowCount() > 0) {
                modelo.removeRow(0);
            }
            for (int i = 0; i < lista.get(box_persona1.getSelectedIndex()).getLista().size(); i++) {
                Object[] datos = {lista.get(box_persona1.getSelectedIndex()).getLista().get(i)[0], lista.get(box_persona1.getSelectedIndex()).getLista().get(i)[1]};
                modelo.addRow(datos);
            }
        }
    }//GEN-LAST:event_AgregarRelacionActionPerformed

    private void box_persona1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_box_persona1ItemStateChanged
        // TODO add your handling code here:

        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
        for (int i = 0; i < lista.get(box_persona1.getSelectedIndex()).getLista().size(); i++) {
            Object[] datos = {lista.get(box_persona1.getSelectedIndex()).getLista().get(i)[0], lista.get(box_persona1.getSelectedIndex()).getLista().get(i)[1]};
            modelo.addRow(datos);
        }
        listaTmp = new ArrayList<Object[]>();
    }//GEN-LAST:event_box_persona1ItemStateChanged

    private void GraficarDijsktraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficarDijsktraActionPerformed
        // TODO add your handling code here:

        graph = new DirectedSparseMultigraph<String, Peso>();

        for (int j = 0; j < lista.size(); j++) {
            for (int k = 0; k < lista.get(j).getLista().size(); k++) {
                graph.addEdge((Peso) lista.get(j).getLista().get(k)[1], lista.get(j).toString(), lista.get(j).getLista().get(k)[0].toString());
            }
        }

        Transformer<Peso, Double> transformer = new Transformer<Peso, Double>() {
            @Override
            public Double transform(Peso link) {
                return (double) link.weight;
            }
        };

        DijkstraShortestPath<String, Peso> dijkstra = new DijkstraShortestPath(graph, transformer);
        String primero = dijsktra1.getSelectedItem().toString();
        String segundo = dijsktra2.getSelectedItem().toString();
        try {
            List<Peso> peso = dijkstra.getPath(primero, segundo);
            if (!peso.isEmpty()) {
                graph = new DirectedSparseMultigraph<String, Peso>();
                for (int i = 0; i < peso.size(); i++) {
                    for (int j = 0; j < lista.size(); j++) {
                        for (int k = 0; k < lista.get(j).getLista().size(); k++) {
                            Object[] list = lista.get(j).getLista().get(k);
                            String p = (String) list[0];
                            Peso weight = (Peso) list[1];
                            if (peso.get(i).equals(weight)) {
                                graph.addEdge(weight, lista.get(j).toString(), p, EdgeType.DIRECTED);
                            }
                        }
                    }
                }
                graficar(graph);
            } else {
                JOptionPane.showMessageDialog(this, "No tiene ninguna relacion");
                return;

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "No tiene ninguna relacion");
        }

    }//GEN-LAST:event_GraficarDijsktraActionPerformed

    public BasicVisualizationServer graficar(DirectedSparseMultigraph<String, Peso> graph) {
        Layout<String, Peso> layout = new FRLayout(graph);
        BasicVisualizationServer<String, Peso> bsv = new BasicVisualizationServer<>(layout);
        bsv.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
        bsv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        bsv.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);
        JFrame frame = new JFrame("Grafo");
        frame.getContentPane().add(bsv);
        frame.pack();
        frame.setVisible(true);
        return bsv;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddPerson;
    private javax.swing.JMenuItem AddRelation;
    private javax.swing.JTable AddTable;
    private javax.swing.JDialog AgregarPersona;
    private javax.swing.JButton AgregarRelacion;
    private javax.swing.JDialog Dijkstra;
    private javax.swing.JButton GraficarDijsktra;
    private javax.swing.JMenuItem Graph;
    private javax.swing.JMenuItem RelacionMasCorta;
    private javax.swing.JDialog Relaciones;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JTable Tabla;
    private javax.swing.JComboBox box_persona1;
    private javax.swing.JComboBox box_persona2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox dijsktra1;
    private javax.swing.JComboBox dijsktra2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jb_persona;
    private javax.swing.JButton jb_salir;
    private javax.swing.JMenu jj;
    private javax.swing.JRadioButton rb_f;
    private javax.swing.JRadioButton rb_m;
    private javax.swing.JSpinner sp_edad;
    private javax.swing.JSpinner sp_relacion;
    private javax.swing.JTextField tf_nombre;
    // End of variables declaration//GEN-END:variables
}
